%% lyx 2.1.0svn created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\usepackage{amssymb}
\usepackage{amsmath}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
%\usepackage{breakurl}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\renewcommand{\textfraction}{0.05}
\renewcommand{\topfraction}{0.8}
\renewcommand{\bottomfraction}{0.8}
\renewcommand{\floatpagefraction}{0.75}

\makeatother

\begin{document}

%% still can't get paths to work ...
% \SweaveOpts{path=fig/hw3-,fig.align=center,fig.show=hold,dev=png,width=6,height=4}

<<setup,echo=FALSE,results=hide,message=FALSE>>=
options(replace.assign=TRUE,width=90)
knit_hooks$set(par=function(before, options, envir){if (before) par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3,las=1)})
require(bbmle)
require(rethinking)
require(ggplot2)
@

\begin{center}
  {\bf \Large Homework 3, Statistical Rethinking}\\
\vspace{12pt}
   {\large Jaime Ashander}
\end{center}



\subsection*{Problem 1}
\label{problem1}

Using the Howell dataset, adults only

<<d2-load,message=FALSE>>=
data(Howell1) 
d2 <- Howell1[ Howell1$age >= 18 , ]
@ 

we model the relationship between height $h_i$ and weight $w_i$ as
\[
h_i  \sim {\rm Normal}\left ( \mu_i, \sigma \right). 
\]

with $\mu_i = \alpha + \beta w_i$.

Note that $h_i$ is column `height` and $w_i$ is column `weight` in the data frame `d2`. 

<<height-weight,message=FALSE,warning=FALSE>>=
mle.hw <- mle2(height ~ dnorm(mean=alpha + beta*weight, sd=sigma), data=d2, start=list(alpha=mean(d2$height), beta=0, sigma=sd(d2$height)))
known.weights <- c(46.95,43.72,64.78,32.59,54.63)
post <- as.data.frame(mvrnorm(length(d2$height) , mu=coef(mle.hw), Sigma=vcov(mle.hw)))
Pred.mean <- function(x){ret = coef(mle.hw)['alpha'] + coef(mle.hw)['beta']* x; names(ret) = c(''); ret}

height.PI = sapply(known.weights, function(x){HPDI(rnorm(n = 1e4, mean=post$alpha + post$beta*x, sd=post$sigma), prob=0.9)})
height.mean = sapply(known.weights, Pred.mean)

height.table = cbind(individual=1:5,known.weights,expected.height=height.mean, lower.90=height.PI[1,], upper.90=height.PI[2,])
height.table

@ 

The above provides 90\% {\em PREDICTION } intervals (i.e., confidence intervals on the predictions)

\subsubsection{a}

Now, we apply the same model to  youth in the Howell dataset, 

<<message=FALSE,warning=FALSE>>=
dY <- Howell1[Howell1$age <18,]
mle.hwY <- mle2(height ~ dnorm(mean=alpha + beta*weight, sd=sigma), data=dY, start=list(alpha=mean(d2$height), beta=0, sigma=sd(d2$height)))
precis(mle.hwY)

@ 

A simple interpretation of the coefficients implies:

\begin{itemize}
  \item on average a child gains 27.2 units in height for each gain of 10 units in weight
  \item a child of zero weight is 58.23 units tall
\end{itemize}

\subsubsection{b}


<<pi-youth, fig=TRUE,message=FALSE>>=
#sample posterior
postY <- as.data.frame(mvrnorm(1e4 , mu=coef(mle.hwY), Sigma=vcov(mle.hwY)))

# calculate CI for mean
weight.range = seq(min(dY$weight), max(dY$weight), length.out=nrow(dY))
heightY.CI = sapply(weight.range, function(x){HPDI(postY$alpha + postY$beta*x, prob=0.9)})
row.names(heightY.CI) = paste(row.names(heightY.CI),"CI")
# calculate PI
heightY.PI = sapply(weight.range, function(x){HPDI(rnorm(1e4, mean=(postY$alpha + postY$beta*x),sd=postY$sigma), prob=0.90)})
row.names(heightY.PI) = paste(row.names(heightY.PI),"PI")
dY <- as.data.frame(cbind(dY, t(heightY.CI), t(heightY.PI),w=weight.range))

dY.m <- melt(dY, id.vars=c('weight', 'w', 'age', 'male', 'height'))

p <- ggplot(data=dY.m) + 
  geom_point(aes(weight,height)) + 
  geom_abline(intercept=coef(mle.hwY)['alpha'], slope=coef(mle.hwY)['beta']) + 
  geom_line(aes(w,value,color=variable)) #annoying that unique colors for each need to get gg to plot both at once, solution with row.names=rep("CI",2) doesn't plot _Both_ lines... 
p                

## lines(heightY.CI['lower',]~weight.range, lty=2)
## lines(heightY.CI['upper',]~weight.range, lty=2)
## lines(heightY.PI['upper',]~weight.range, lty=3)
## lines(heightY.PI['lower',]~weight.range, lty=3)

@ 

\subsubsection{c}

The plot above shows raw data, predicted mean heights (black), prediction intervals (PI), and confidence intervals (CI). 
 I'm most concerned by the performance of the fit at low and high weights. 
In particular, the model underpredicts height at the upper end of the weight range, and overpredicts at lower end of the range.
I expect these poblems arise because the linear model cannot accommodate the biological reality of growth and development; the amount of energy (weight) allocated height may change over development. 
Further, height levels off at low weights.

To accommodate biological reality, I would use a model where growth has  non-linear relationship with weight.
One possibility is a sinusoid: non-growth development early, then even develoment/height, then leveling off to maintenance.
I would like to keep intercept at zero though. 

Another possibility is to transform the data\dots 


\subsection*{Problem 3}

For the Howell dataset (n=544 individuals) we  model the relationship between height (cm) and the natural logarithm of weight (log-kg). 
\[\begin{split}h_i \sim Normal(\mu_i, \sigma)\\ \mu_i =\alpha+\beta \log(w_i),\end{split}\]
where $h_i$ is the height (in cm), and $w_i$ the weight (in kg), of individual i. 

We use the entire Howell1 data frame, all 544 rows, adults and non-adults. 

\subsubsection{(a)}

First, we fit model, using a quadratic approximation of the likelihood

<<log-fit,warning=FALSE,message=FALSE>>=
d = Howell1
d$log.w = log(d$weight)
mle.loghw <- mle2(height ~ dnorm(mean=alpha + beta*log.w, sd=sigma), data=d, start=list(alpha=mean(d$height), beta=0, sigma=sd(d$height)))
precis(mle.loghw)

@ 

\subsubsection{(b)}

The model above is equivalent to

\[\begin{split}h_i \sim Normal(\mu_i, \sigma)\\ \mu_i =\alpha+\beta y_i\\ y_i = \log(w_i),\end{split}\]
where $h_i$ is the height (in cm), and $w_i$ the weight (in kg) and $y_i$ log weight (in log-kg), of individual $i$. 


Now we plot observations $h_i$ against $w_i$, as well as predicted means and 95\% HPDI for mean and predicted heights. 
In practice, this means plotting
\begin{itemize}
  \item $h_i$ against $\exp(y_i)$
  \item HPDIs computed for each $y_i$ against $\exp(y_i)$
\end{itemize}

For the mean prediction, however, we directly plot the curve
\[
\bar h = \alpha + \beta \log(w_i).
\]


    
<<all-data,fig=TRUE,warning=FALSE>>=
#sample posterior
post <- as.data.frame(mvrnorm(length(d$height) , mu=coef(mle.loghw), Sigma=vcov(mle.loghw)))

# calculate CI for mean
log.w.range = seq(min(d$log.w), max(d$log.w), length.out=60) 
heightf.CI = sapply(log.w.range, function(x){HPDI(post$alpha + post$beta*x, prob=0.95)})
# calculate PI for mean
heightf.PI = sapply(log.w.range, function(x){HPDI(rnorm(1e4, mean=(post$alpha + post$beta*x),sd=post$sigma), prob=0.95)})

# plot TODO: clean this up, maybe rewrite as ggplot
plot(height ~ exp(log.w) , data=d , col=col.alpha('slateblue',0.4))
Pred.fn <- function(x){
  a = coef(mle.loghw)['alpha']
  b = coef(mle.loghw)['beta']
  a + b*log(x)
}
curve(Pred.fn, from=min(d$weight), to=max(d$weight), add=T)
lines(heightf.CI['lower',]~exp(log.w.range), lty=2)
lines(heightf.CI['upper',]~exp(log.w.range), lty=2)
lines(heightf.PI['upper',]~exp(log.w.range), lty=3)
lines(heightf.PI['lower',]~exp(log.w.range), lty=3)

@ 


Equivalently, it seems, we can directly fit the model from {\bf (a)} and obtain indistinguishable estimates and plots \dots 


<<all-data2,fig=TRUE,warning=FALSE>>=
#other way.. 
m2 <- mle2(height ~ dnorm(mean=alpha + beta*log.w, sd=sigma), data=d, start=list(alpha=mean(d$height), beta=0, sigma=sd(d$height)))

post2 <- as.data.frame(mvrnorm(length(d$height) , mu=coef(m2), Sigma=vcov(m2)))

weight.range = seq(min(d$weight), max(d$weight), length.out=60) 
heightf.CI = sapply(weight.range, function(x){HPDI(post2$alpha + post2$beta*log(x), prob=0.95)})

heightf.PI = sapply(weight.range, function(x){HPDI(rnorm(1e4, mean=(post2$alpha + post2$beta*log(x)), sd=post2$sigma), prob=0.95)})

plot(height~weight, data=d,  col=col.alpha('orange',0.4))
curve(coef(m2)['alpha']+log(x)*coef(m2)['beta'], from=min(d$weight), to=max(d$weight), add=T)
lines(heightf.CI['lower',]~weight.range, lty=2)
lines(heightf.CI['upper',]~weight.range, lty=2)
lines(heightf.PI['upper',]~weight.range, lty=3)
lines(heightf.PI['lower',]~weight.range, lty=3)

@ 


\subsection*{Colophon}

<<runit,eval=FALSE>>=
require(knitr) ### the package
knit(paste(getwd(),'hw3ashander.Rnw',sep='/')) ## to run
@ 


\end{document}
